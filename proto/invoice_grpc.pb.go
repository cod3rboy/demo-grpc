// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/invoice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvoicerServiceClient is the client API for InvoicerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoicerServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (InvoicerService_ListAllClient, error)
}

type invoicerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicerServiceClient(cc grpc.ClientConnInterface) InvoicerServiceClient {
	return &invoicerServiceClient{cc}
}

func (c *invoicerServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.InvoicerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicerServiceClient) Get(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/proto.InvoicerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicerServiceClient) ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (InvoicerService_ListAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InvoicerService_ServiceDesc.Streams[0], "/proto.InvoicerService/ListAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &invoicerServiceListAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InvoicerService_ListAllClient interface {
	Recv() (*InvoiceResponse, error)
	grpc.ClientStream
}

type invoicerServiceListAllClient struct {
	grpc.ClientStream
}

func (x *invoicerServiceListAllClient) Recv() (*InvoiceResponse, error) {
	m := new(InvoiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InvoicerServiceServer is the server API for InvoicerService service.
// All implementations must embed UnimplementedInvoicerServiceServer
// for forward compatibility
type InvoicerServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *InvoiceRequest) (*InvoiceResponse, error)
	ListAll(*emptypb.Empty, InvoicerService_ListAllServer) error
	mustEmbedUnimplementedInvoicerServiceServer()
}

// UnimplementedInvoicerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvoicerServiceServer struct {
}

func (UnimplementedInvoicerServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInvoicerServiceServer) Get(context.Context, *InvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInvoicerServiceServer) ListAll(*emptypb.Empty, InvoicerService_ListAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedInvoicerServiceServer) mustEmbedUnimplementedInvoicerServiceServer() {}

// UnsafeInvoicerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicerServiceServer will
// result in compilation errors.
type UnsafeInvoicerServiceServer interface {
	mustEmbedUnimplementedInvoicerServiceServer()
}

func RegisterInvoicerServiceServer(s grpc.ServiceRegistrar, srv InvoicerServiceServer) {
	s.RegisterService(&InvoicerService_ServiceDesc, srv)
}

func _InvoicerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InvoicerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InvoicerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServiceServer).Get(ctx, req.(*InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicerService_ListAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InvoicerServiceServer).ListAll(m, &invoicerServiceListAllServer{stream})
}

type InvoicerService_ListAllServer interface {
	Send(*InvoiceResponse) error
	grpc.ServerStream
}

type invoicerServiceListAllServer struct {
	grpc.ServerStream
}

func (x *invoicerServiceListAllServer) Send(m *InvoiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InvoicerService_ServiceDesc is the grpc.ServiceDesc for InvoicerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoicerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InvoicerService",
	HandlerType: (*InvoicerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InvoicerService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InvoicerService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAll",
			Handler:       _InvoicerService_ListAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/invoice.proto",
}
